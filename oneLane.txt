
cars Cars[n]		\\fixed-size array of n Cars
			\\Each car has a 2D vector of the form {{Xli,Xri,Vi},{Xlf,Xrf,Vi}}
			\\(Xli,Xri,Vi) is the position,velocity before update
			\\(Xlf,Xrf,Vf) is the position,velocity after update
			\\Each car has functions for accelerating, decelerating
			\\Each car has variables for acceleration, jerk


time = 0

while true

	for all 2D_Vectors in cars

		gap = nth Xri - n+1th Xli		\\gap between nth car and n+1th car

		if "gap = stopping distance"
			car[n].accelerate()
			car[n+1].accelerate()		\\if we have optimal gap, both accelerate
							\\equivalently.
	 
			adjustStoppingDistance()	\\acceleration means cars must have a larger optimal gap

		else if "gap > stopping distance"
			car[n].accelerate()	
			
			adjustStoppingDistance()	\\faster speed means larger stopping distance 
		
		else if "gap < stopping distance" 
			car[n].decelerate()
			
			adjustStoppingDistance()	\\slower speed means shorter stopping distance
		
		
		Vi = Vf					\\update initial values with previous final values
		Xli = Xlf
		Xri = Xrf

		Vf += (cars[n].acceleration)*(time interval)	\\update final values with kinematics
		Xlf += Vf*(time interval)
		Xrf += Vf*(time interval)


	end 
	
	time += time interval

end


